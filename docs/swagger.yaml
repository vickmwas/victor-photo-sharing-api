{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/auth/signup": {
      "post": {
        "operationId": "AuthController_signUp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered."
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "summary": "Register a new user",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "summary": "Login user",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User successfully logged out."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Logout user",
        "tags": [
          "auth"
        ]
      }
    },
    "/users": {
      "get": {
        "operationId": "UsersController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/profile": {
      "get": {
        "operationId": "UsersController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Fetch the authenticated user's profile, including uploaded photos, followers, and following count",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "operationId": "UsersController_updateProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update the authenticated user's profile information",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "UsersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "operationId": "UsersController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "UsersController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/follow": {
      "patch": {
        "operationId": "UsersController_followUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User followed successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Follow a user",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/unfollow": {
      "patch": {
        "operationId": "UsersController_unfollowUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User unfollowed successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Unfollow a user",
        "tags": [
          "Users"
        ]
      }
    },
    "/notifications": {
      "get": {
        "operationId": "NotificationsController_getUserNotifications",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of notifications"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user notifications",
        "tags": [
          "notifications"
        ]
      }
    },
    "/notifications/{id}/read": {
      "patch": {
        "operationId": "NotificationsController_markAsRead",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification marked as read"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Mark notification as read",
        "tags": [
          "notifications"
        ]
      }
    },
    "/photos/upload": {
      "post": {
        "operationId": "PhotosController_uploadPhoto",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Photo upload",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadPhotoDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The photo has been successfully uploaded.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "photoUrl": "https://example.com/photo.jpg",
                    "filename": "photo.jpg",
                    "size": 1024,
                    "mimeType": "image/jpeg",
                    "caption": "This is a photo caption"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Upload a photo",
        "tags": [
          "Photos"
        ]
      }
    },
    "/photos/feed": {
      "get": {
        "operationId": "PhotosController_getUserFeed",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User feed"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Fetch the user's feed, showing photos uploaded by themselves and users they follow",
        "tags": [
          "Photos"
        ]
      }
    },
    "/photos": {
      "post": {
        "operationId": "PhotosController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhotoDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The photo entry has been successfully created."
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a photo entry",
        "tags": [
          "Photos"
        ]
      },
      "get": {
        "operationId": "PhotosController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of photos"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List uploaded photos for the authenticated user",
        "tags": [
          "Photos"
        ]
      }
    },
    "/photos/{id}": {
      "get": {
        "operationId": "PhotosController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Photo details"
          },
          "404": {
            "description": "Photo not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a photo by ID",
        "tags": [
          "Photos"
        ]
      },
      "patch": {
        "operationId": "PhotosController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhotoDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Photo updated successfully"
          },
          "404": {
            "description": "Photo not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a photo by ID",
        "tags": [
          "Photos"
        ]
      },
      "delete": {
        "operationId": "PhotosController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Photo deleted successfully"
          },
          "404": {
            "description": "Photo not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a photo by ID",
        "tags": [
          "Photos"
        ]
      }
    },
    "/photos/{id}/like": {
      "post": {
        "operationId": "PhotosController_likePhoto",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Photos"
        ]
      },
      "delete": {
        "operationId": "PhotosController_unlikePhoto",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Photos"
        ]
      }
    },
    "/photos/{id}/comments": {
      "post": {
        "operationId": "PhotosController_addComment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Photos"
        ]
      }
    },
    "/photos/{id}/details": {
      "get": {
        "operationId": "PhotosController_getPhotoDetails",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Photos"
        ]
      }
    },
    "/likes": {
      "post": {
        "operationId": "LikesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLikeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Likes"
        ]
      },
      "get": {
        "operationId": "LikesController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Likes"
        ]
      }
    },
    "/likes/{id}": {
      "get": {
        "operationId": "LikesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Likes"
        ]
      },
      "patch": {
        "operationId": "LikesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLikeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Likes"
        ]
      },
      "delete": {
        "operationId": "LikesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Likes"
        ]
      }
    },
    "/comments/{id}": {
      "patch": {
        "operationId": "CommentsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Comment not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a comment",
        "tags": [
          "Comments"
        ]
      },
      "delete": {
        "operationId": "CommentsController_deleteComment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Comment not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a comment",
        "tags": [
          "Comments"
        ]
      }
    },
    "/search": {
      "get": {
        "operationId": "SearchController_search",
        "parameters": [
          {
            "name": "query",
            "required": true,
            "in": "query",
            "description": "Search term (hashtag or username)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns photos matching hashtag or username"
          }
        },
        "summary": "Search by hashtag or username",
        "tags": [
          "search"
        ]
      }
    }
  },
  "info": {
    "title": "Incourage - Photo Sharing API",
    "description": "REST API for the Photo Sharing App",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "SignUpDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "The name of the user"
          },
          "username": {
            "type": "string",
            "example": "johndoe",
            "description": "The username of the user"
          },
          "email": {
            "type": "string",
            "example": "john@example.com",
            "description": "The email of the user"
          },
          "password": {
            "type": "string",
            "example": "password123",
            "description": "The user password"
          },
          "bio": {
            "type": "string",
            "example": "Hi, I am John",
            "description": "The user bio"
          },
          "profilePhotoUrl": {
            "type": "string",
            "example": "https://example.com/photo.jpg",
            "description": "The profile photo URL"
          }
        },
        "required": [
          "name",
          "username",
          "email",
          "password"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "johndoe",
            "description": "Username or email"
          },
          "password": {
            "type": "string",
            "example": "password123",
            "description": "User password"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "new_username",
            "description": "The new username"
          },
          "bio": {
            "type": "string",
            "example": "This is my bio",
            "description": "The user bio"
          }
        }
      },
      "UploadPhotoDto": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "The photo file"
          }
        },
        "required": [
          "file"
        ]
      },
      "CreatePhotoDto": {
        "type": "object",
        "properties": {
          "photoUrl": {
            "type": "string",
            "example": "https://s3-url/photo.jpg",
            "description": "The photo URL"
          },
          "filename": {
            "type": "string",
            "example": "photo.jpg",
            "description": "The photo filename"
          },
          "size": {
            "type": "number",
            "example": 1024,
            "description": "The photo size in bytes"
          },
          "mimeType": {
            "type": "string",
            "example": "image/jpeg",
            "description": "The photo MIME type"
          },
          "caption": {
            "type": "string",
            "example": "This is a photo caption",
            "description": "The photo caption"
          }
        },
        "required": [
          "photoUrl",
          "filename",
          "size",
          "mimeType",
          "caption"
        ]
      },
      "UpdatePhotoDto": {
        "type": "object",
        "properties": {}
      },
      "CreateCommentDto": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          }
        },
        "required": [
          "comment"
        ]
      },
      "CreateLikeDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateLikeDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateCommentDto": {
        "type": "object",
        "properties": {}
      }
    }
  }
}